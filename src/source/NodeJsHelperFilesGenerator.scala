package djinni

import java.io.File

import djinni.ast._
import djinni.generatorTools._

class NodeJsHelperFilesGenerator(spec: Spec, helperFileDescriptor: NodeJsHelperFilesDescriptor) extends Generator(spec) {

  def generateObjectWrapperHeader(): Unit = {
    val define = ("DJINNI_GENERATED_" + helperFileDescriptor.ObjectWrapperName + "_" + spec.cppHeaderExt).toUpperCase
    createFile(spec.nodeOutFolder.get, helperFileDescriptor.ObjectWrapperHeader, { (w: writer.IndentWriter) =>

      w.wl("// AUTOGENERATED FILE - DO NOT MODIFY!")
      w.wl("// This file generated by Djinni")

      w.wl(s"#ifndef $define")
      w.wl(s"#define $define")
      w.wl
      w.wl("#include <memory>")
      w.wl
      w.wl("#include <nan.h>")
      w.wl("#include <node.h>")
      w.wl
      w.wl("namespace djinni").bracedEndNested(" // djinni", false) {
        w.wl("namespace js").bracedEndNested(" //js", false) {
          w.wl
          w.wl("template<typename T>")
          w.wl("class ObjectWrapper: public Nan::ObjectWrap").bracedEnd(";") {
            w.wlOutdent("public:")
            w.wl("static void Wrap(const std::shared_ptr<T>& realObjectPtr, v8::Local<v8::Object> newHandleExposedToJS)").braced {
              w.wl("auto wrapper = new ObjectWrapper(realObjectPtr);")
              w.wl("wrapper->Nan::ObjectWrap::Wrap(newHandleExposedToJS);")
            }
            w.wl("static std::shared_ptr<T> Unwrap(v8::Local<v8::Object> handle)").braced {
              w.wl("return Nan::ObjectWrap::Unwrap<ObjectWrapper<T>>(handle)->_ptr;")
            }
            w.wlOutdent("private:")
            w.wl("explicit ObjectWrapper(const std::shared_ptr<T>& realObjectPtr)	: _ptr(realObjectPtr) {};")
            w.wl("std::shared_ptr<T> _ptr;")
          }
        }
      }
      w.wl(s"#endif //$define")
    })
  }

  override def generate(idl: Seq[TypeDecl]): Unit = {
    generateObjectWrapperHeader()
  }

  override def generateEnum(origin: String, ident: Ident, doc: Doc, e: Enum): Unit = ???

  override def generateRecord(origin: String, ident: Ident, doc: Doc, params: Seq[TypeParam], r: Record): Unit = ???

  override def generateInterface(origin: String, ident: Ident, doc: Doc, typeParams: Seq[TypeParam], i: Interface): Unit = ???
}


